{"version":3,"sources":["../src/Sharding/ShardClientUtil.ts"],"names":[],"mappings":"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","file":"ShardClientUtil.js","sourcesContent":["import { Client, Util } from 'discord.js';\r\nimport { ClusterIPC } from '../IPC/ClusterIPC';\r\nimport { IPCEvents } from '../Util/Constants';\r\nimport { SendOptions } from 'veza';\r\n\r\nexport interface IPCResult {\r\n\tsuccess: boolean;\r\n\td: unknown;\r\n}\r\n\r\nexport interface IPCError {\r\n\tname: string;\r\n\tmessage: string;\r\n\tstack: string;\r\n}\r\n\r\nexport class ShardClientUtil {\r\n\tpublic readonly clusterCount = Number(process.env.CLUSTER_CLUSTER_COUNT);\r\n\tpublic readonly shardCount = Number(process.env.CLUSTER_SHARD_COUNT);\r\n\tpublic readonly id = Number(process.env.CLUSTER_ID);\r\n\tpublic readonly ipc = new ClusterIPC(this.client, this.id, this.ipcSocket);\r\n\tpublic readonly shards = String(process.env.CLUSTER_SHARDS).split(\",\");\r\n\r\n\tpublic constructor(public client: Client, public ipcSocket: string | number) {\r\n\t}\r\n\r\n\tpublic broadcastEval(script: string | Function): Promise<unknown[]> {\r\n\t\treturn this.ipc.broadcast(script);\r\n\t}\r\n\r\n\tpublic masterEval(script: string | Function): Promise<unknown> {\r\n\t\treturn this.ipc.masterEval(script);\r\n\t}\r\n\r\n\tpublic fetchClientValues(prop: string): Promise<unknown[]> {\r\n\t\treturn this.ipc.broadcast(`this.${prop}`);\r\n\t}\r\n\r\n\tpublic async fetchGuild(id: string) {\r\n\t\tconst { success, d } = await this.send({ op: IPCEvents.FETCHGUILD, d: id }) as IPCResult;\r\n\t\tif (!success) throw new Error('No guild with this id found!');\r\n\t\treturn d as object;\r\n\t}\r\n\r\n\tpublic async fetchUser(id: string) {\r\n\t\tconst { success, d } = await this.send({ op: IPCEvents.FETCHUSER, d: id }) as IPCResult;\r\n\t\tif (!success) throw new Error('No user with this id found!');\r\n\t\treturn d as object;\r\n\t}\r\n\r\n\tpublic async fetchChannel(id: string) {\r\n\t\tconst { success, d } = await this.send({ op: IPCEvents.FETCHCHANNEL, d: id }) as IPCResult;\r\n\t\tif (!success) throw new Error('No channel with this id found!');\r\n\t\treturn d as object;\r\n\t}\r\n\r\n\tpublic async restartAll() {\r\n\t\tawait this.ipc.server.send({ op: IPCEvents.RESTARTALL }, { receptive: false });\r\n\t}\r\n\r\n\tpublic async restart(clusterID: number) {\r\n\t\tconst { success, d } = await this.ipc.server.send({ op: IPCEvents.RESTART, d: clusterID }) as IPCResult;\r\n\t\tif (!success) throw Util.makeError(d as IPCError);\r\n\t}\r\n\r\n\tpublic respawnAll() {\r\n\t\treturn this.restartAll();\r\n\t}\r\n\r\n\tpublic send(data: any, options?: SendOptions) {\r\n\t\tif (typeof data === 'object' && data.op !== undefined) return this.ipc.server.send(data, options);\r\n\t\treturn this.ipc.server.send({ op: IPCEvents.MESSAGE, d: data }, options);\r\n\t}\r\n\r\n\tpublic init() {\r\n\t\treturn this.ipc.init();\r\n\t}\r\n}\r\n"],"sourceRoot":"../../src"}