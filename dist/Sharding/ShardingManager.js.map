{"version":3,"sources":["../src/Sharding/ShardingManager.ts"],"names":[],"mappings":"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","file":"ShardingManager.js","sourcesContent":["import { Client, ClientOptions } from 'discord.js';\r\nimport { MasterIPC } from '../IPC/MasterIPC';\r\nimport { Cluster } from '../Cluster/Cluster';\r\nimport { http, SharderEvents } from '../Util/Constants';\r\nimport { EventEmitter } from 'events';\r\nimport { cpus } from 'os';\r\nimport { isMaster, setupMaster } from 'cluster';\r\nimport * as Util from '../Util/Util';\r\nimport fetch from 'node-fetch';\r\n\r\nexport interface SharderOptions {\r\n\ttoken?: string;\r\n\tshardCount?: number | 'auto';\r\n\tclusterCount?: number;\r\n\tname?: string;\r\n\tdevelopment?: boolean;\r\n\tclient?: typeof Client;\r\n\tclientOptions?: ClientOptions;\r\n\tguildsPerShard?: number;\r\n\trespawn?: boolean;\r\n\tipcSocket?: string | number;\r\n\ttimeout?: number;\r\n\tretry?: boolean;\r\n\tnodeArgs?: Array<string>;\r\n\tshardList?: number[] | 'auto';\r\n}\r\n\r\nexport interface SessionObject {\r\n\turl: string;\r\n\tshards: number;\r\n\tsession_start_limit: {\r\n\t\ttotal: number;\r\n\t\tremaining: number;\r\n\t\treset_after: number;\r\n\t};\r\n}\r\n\r\nexport interface CloseEvent {\r\n\tcode: number;\r\n\treason: string;\r\n\twasClean: boolean;\r\n}\r\n\r\nexport class ShardingManager extends EventEmitter {\r\n\tpublic clusters = new Map<number, Cluster>();\r\n\tpublic clientOptions: ClientOptions;\r\n\tpublic shardCount: number | 'auto';\r\n\tpublic guildsPerShard: number;\r\n\tpublic client: typeof Client;\r\n\tpublic clusterCount: number;\r\n\tpublic ipcSocket: string | number;\r\n\tpublic respawn: boolean;\r\n\tpublic timeout: number;\r\n\tpublic retry: boolean;\r\n\tpublic nodeArgs?: Array<string>;\r\n\tpublic ipc: MasterIPC;\r\n\tpublic shardList: number[] | 'auto';\r\n\tprivate readonly development: boolean;\r\n\tprivate readonly token?: string;\r\n\r\n\tpublic constructor(public path: string, options: SharderOptions) {\r\n\t\tsuper();\r\n\t\tthis.clusterCount = options.clusterCount || cpus().length;\r\n\t\tthis.guildsPerShard = options.guildsPerShard || 1000;\r\n\t\tthis.clientOptions = options.clientOptions || {};\r\n\t\tthis.development = options.development || false;\r\n\t\tthis.shardCount = options.shardCount || 'auto';\r\n\t\tthis.client = options.client || Client;\r\n\t\tthis.respawn = options.respawn || true;\r\n\t\tthis.ipcSocket = options.ipcSocket || 9999;\r\n\t\tthis.retry = options.retry || true;\r\n\t\tthis.timeout = options.timeout || 30000;\r\n\t\tthis.token = options.token;\r\n\t\tthis.nodeArgs = options.nodeArgs;\r\n\t\tthis.ipc = new MasterIPC(this);\r\n\t\tthis.shardList = options.shardList || 'auto';\r\n\t\t\r\n\t\tthis.ipc.on('debug', msg => this._debug(`[IPC] ${msg}`));\r\n\t\tthis.ipc.on('error', err => this.emit(SharderEvents.ERROR, err));\r\n\r\n\t\tif (!this.path) throw new Error('You need to supply a Path!');\r\n\t}\r\n\r\n\tpublic async spawn() {\r\n\t\tif (isMaster) {\r\n\r\n\t\t\tif (this.shardList !== 'auto') {\r\n\t\t\t\tif (!Array.isArray(this.shardList)) throw new Error('shardList is an array.');\r\n\t\t\t\tthis.shardList = [...new Set(this.shardList)];\r\n\t\t\t\tif (this.shardList.length < 1) throw new Error('shardList needs at least 1 ID.');\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.shardList.some(shardID => typeof shardID !== 'number' || isNaN(shardID) || !Number.isInteger(shardID) || shardID < 0,)\r\n\t\t\t\t) {\r\n\t\t\t\t\tthrow new Error('shardList is an array of positive integers.');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.shardList === 'auto' || this.shardCount === 'auto') {\r\n\t\t\t\tthis.shardList = [...Array(this.shardCount).keys()];\r\n\t\t\t}\r\n\r\n\t\t\tif (this.shardCount === 'auto') {\r\n\t\t\t\tthis._debug('Fetching Session Endpoint');\r\n\t\t\t\tconst { shards: recommendShards } = await this._fetchSessionEndpoint();\r\n\r\n\t\t\t\tthis.shardCount = Util.calcShards(recommendShards, this.guildsPerShard);\r\n\t\t\t\tthis._debug(`Using recommend shard count of ${this.shardCount} shards with ${this.guildsPerShard} guilds per shard`);\r\n\t\t\t}\r\n\r\n\t\t\tthis._debug(`Starting ${this.shardCount} Shards in ${this.clusterCount} Clusters!`);\r\n\r\n\t\t\tif (this.shardList.length < this.clusterCount) {\r\n\t\t\t\tthis.clusterCount = this.shardList.length;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.shardList.some(shardID => shardID >= this.shardCount)) {\r\n\t\t\t\tthrow new Error('Amount of shards bigger than the highest shardID in the shardList option.');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._debug(`Loading list of ${this.shardList.length} total shards`);\r\n\r\n\t\t\tconst shardTuple = Util.chunk(this.shardList, this.clusterCount);\r\n\t\t\tconst failed: Cluster[] = [];\r\n\r\n\t\t\tconsole.log(\"shardTuple\",shardTuple)\r\n\r\n\t\t\tif (this.nodeArgs) setupMaster({ execArgv: this.nodeArgs });\r\n\r\n\t\t\tfor (let index = 0; index < this.clusterCount; index++) {\r\n\t\t\t\tconst shards = shardTuple.shift()!;\r\n\r\n\t\t\t\tconst cluster = new Cluster({ id: index, shards, manager: this });\r\n\r\n\t\t\t\tthis.clusters.set(index, cluster);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait cluster.spawn();\r\n\t\t\t\t} catch {\r\n\t\t\t\t\tthis._debug(`Cluster ${cluster.id} failed to start`);\r\n\t\t\t\t\tthis.emit(SharderEvents.ERROR, new Error(`Cluster ${cluster.id} failed to start`));\r\n\t\t\t\t\tif (this.retry) {\r\n\t\t\t\t\t\tthis._debug(`Requeuing Cluster ${cluster.id} to be spawned`);\r\n\t\t\t\t\t\tfailed.push(cluster);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.retry) await this.retryFailed(failed);\r\n\t\t} else {\r\n\t\t\treturn Util.startCluster(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async restartAll() {\r\n\t\tthis._debug('Restarting all Clusters!');\r\n\r\n\t\tfor (const cluster of this.clusters.values()) {\r\n\t\t\tawait cluster.respawn();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async restart(clusterID: number) {\r\n\t\tconst cluster = this.clusters.get(clusterID);\r\n\t\tif (!cluster) throw new Error('No Cluster with that ID found.');\r\n\r\n\t\tthis._debug(`Restarting Cluster ${clusterID}`);\r\n\r\n\t\tawait cluster.respawn();\r\n\t}\r\n\r\n\tpublic fetchClientValues(prop: string) {\r\n\t\treturn this.ipc.broadcast(`this.${prop}`);\r\n\t}\r\n\r\n\tpublic eval(script: string) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\ttry {\r\n\t\t\t\t// tslint:disable-next-line:no-eval\r\n\t\t\t\treturn resolve(eval(script));\r\n\t\t\t} catch (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic on(event: SharderEvents.DEBUG, listener: (message: string) => void): this;\r\n\tpublic on(event: SharderEvents.MESSAGE, listener: (message: unknown) => void): this;\r\n\tpublic on(event: SharderEvents.READY | SharderEvents.SPAWN, listener: (cluster: Cluster) => void): this;\r\n\tpublic on(event: SharderEvents.SHARD_READY | SharderEvents.SHARD_RECONNECT, listener: (shardID: number) => void): this;\r\n\tpublic on(event: SharderEvents.SHARD_RESUME, listener: (replayed: number, shardID: number) => void): this;\r\n\tpublic on(event: SharderEvents.SHARD_DISCONNECT, listener: (closeEvent: CloseEvent, shardID: number) => void): this;\r\n\tpublic on(event: any, listener: (...args: any[]) => void): this {\r\n\t\treturn super.on(event, listener);\r\n\t}\r\n\r\n\tpublic once(event: SharderEvents.DEBUG, listener: (message: string) => void): this;\r\n\tpublic once(event: SharderEvents.MESSAGE, listener: (message: unknown) => void): this;\r\n\tpublic once(event: SharderEvents.READY | SharderEvents.SPAWN, listener: (cluster: Cluster) => void): this;\r\n\tpublic once(event: SharderEvents.SHARD_READY | SharderEvents.SHARD_RECONNECT, listener: (shardID: number) => void): this;\r\n\tpublic once(event: SharderEvents.SHARD_RESUME, listener: (replayed: number, shardID: number) => void): this;\r\n\tpublic once(event: SharderEvents.SHARD_DISCONNECT, listener: (closeEvent: CloseEvent, shardID: number) => void): this;\r\n\tpublic once(event: any, listener: (...args: any[]) => void): this {\r\n\t\treturn super.once(event, listener);\r\n\t}\r\n\r\n\tprivate async retryFailed(clusters: Cluster[]): Promise<void> {\r\n\t\tconst failed: Cluster[] = [];\r\n\r\n\t\tfor (const cluster of clusters) {\r\n\t\t\ttry {\r\n\t\t\t\tthis._debug(`Respawning Cluster ${cluster.id}`);\r\n\t\t\t\tawait cluster.respawn();\r\n\t\t\t} catch {\r\n\t\t\t\tthis._debug(`Cluster ${cluster.id} failed, requeuing...`);\r\n\t\t\t\tfailed.push(cluster);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (failed.length) {\r\n\t\t\tthis._debug(`${failed.length} Clusters still failed, retry...`);\r\n\t\t\treturn this.retryFailed(failed);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async _fetchSessionEndpoint(): Promise<SessionObject> {\r\n\t\tif (!this.token) throw new Error('No token was provided!');\r\n\t\tconst res = await fetch(`${http.api}/v${http.version}/gateway/bot`, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: { Authorization: `Bot ${this.token.replace(/^Bot\\s*/i, '')}` }\r\n\t\t});\r\n\t\tif (res.ok) return res.json();\r\n\t\tthrow res;\r\n\t}\r\n\r\n\tprivate _debug(message: string) {\r\n\t\tthis.emit(SharderEvents.DEBUG, message);\r\n\t}\r\n}\r\n"],"sourceRoot":"../../src"}